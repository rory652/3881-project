{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Covid Tracker Documentation See the reference section for help with the API See the about section for information about the project","title":"Home"},{"location":"#covid-tracker-documentation","text":"See the reference section for help with the API See the about section for information about the project","title":"Covid Tracker Documentation"},{"location":"about/","text":"About Project Description This is our Group Design Project for ELEC3885. The aim of our project is to be able to track the spread of Covid-19 within a care home. To do this, we have split this project into 4 stages: Wearables: worn by the residents, featuring Bluetooth technology. Detection Modules: to detect the positions of the wearables. Uses Bluetooth 5.1 AoA (Angle of Arrival) and AoD (Angle of Departure). Back-end: Takes data from Detection Modules and processes it, detect contact between residents and make that accessible through a REST API. Front-end: App and Website allowing care home workers to see who needs to be tested and report cases Project Diagram graph LR W1[Wearable 1] W2[Wearable 2] W3[Wearable n] DM1[Detection Module 1] DM2[Detection Module 2] DM3[Detection Module n] BE[Back-end] FE[Front-end] W1 & W2 & W3 --> DM1 & DM2 & DM3 DM1 & DM2 & DM3 --> BE BE --> FE API Description This documentation focuses on the back-end REST API, containing detailed information on the various endpoints and how to access them.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#project-description","text":"This is our Group Design Project for ELEC3885. The aim of our project is to be able to track the spread of Covid-19 within a care home. To do this, we have split this project into 4 stages: Wearables: worn by the residents, featuring Bluetooth technology. Detection Modules: to detect the positions of the wearables. Uses Bluetooth 5.1 AoA (Angle of Arrival) and AoD (Angle of Departure). Back-end: Takes data from Detection Modules and processes it, detect contact between residents and make that accessible through a REST API. Front-end: App and Website allowing care home workers to see who needs to be tested and report cases","title":"Project Description"},{"location":"about/#project-diagram","text":"graph LR W1[Wearable 1] W2[Wearable 2] W3[Wearable n] DM1[Detection Module 1] DM2[Detection Module 2] DM3[Detection Module n] BE[Back-end] FE[Front-end] W1 & W2 & W3 --> DM1 & DM2 & DM3 DM1 & DM2 & DM3 --> BE BE --> FE","title":"Project Diagram"},{"location":"about/#api-description","text":"This documentation focuses on the back-end REST API, containing detailed information on the various endpoints and how to access them.","title":"API Description"},{"location":"reference/","text":"Home This section contains references for the various parts of the backend Detection Modules: API Endpoints Front-end: API Endpoints Request Structures","title":"Home"},{"location":"reference/#home","text":"This section contains references for the various parts of the backend Detection Modules: API Endpoints Front-end: API Endpoints Request Structures","title":"Home"},{"location":"reference/requests/","text":"HTTP Requests This page contains help for the 4 different HTTP requests that will be used to interact with this API. It contains examples written in popular languages and what you should expect from successful and unsuccessful requests. GET Summary A GET request is used to fetch data from a specific data source from a server. Performing a GET request will not have any effect on the server, it simply fetches data. You send a GET request to a specific endpoint, data can be supplied in the URL or in headers. GET Example Python import requests url = 'https://<url>/<endpoint>' params = { \"key1\" : \"value1\" , \"key2\" : \"value2\" } r = requests . get ( url = url , params = params ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 200 which means okay. There will be some header fields and then a body containing the requested data. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong. POST Summary A POST request is used to submit data to a server. The request asks the server to accept the data stored in the body of the request. It is used to create a resource on the server, often sent to general endpoints rather than specific URIs. Logging into a website typically uses POST, where the login credentials are stored in the body and a user session is created. POST Example Python import requests url = 'https://<url>/<endpoint>' data = { \"key1\" : \"value1\" , \"key2\" : \"value2\" } r = requests . post ( url = url , data = data ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 201 which means created. There will be some header fields and then a body containing the data added to the server, often formatted differently to what was sent. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong. PUT Summary A PUT request is used to update a resource on the server. The request URI points to an existing resource which must be completely replaced by the new data in the request. If the URI doesn't exist, the server may or may not create a new resource, for this application, it will return an error and not create the resource. PUT Example Python import requests url = 'https://<url>/<endpoint>' data = { \"key1\" : \"value1\" , \"key2\" : \"value2\" } r = requests . put ( url = url , data = data ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 200 which means okay. There will be some header fields and then a body containing the updated data. The response may also be 201 if the request caused an entry to be created. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong. DELETE Summary A DELETE request simply removes a resource on the server. The request URI must exist, otherwise the request will fail (as there is nothing to delete). DELETE Example Python import requests url = 'https://<url>/<endpoint>' r = requests . delete ( url = url ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 204 which means the data was deleted and there is no content. No body will be returned but there may be headers containing useful information. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong.","title":"HTTP Requests"},{"location":"reference/requests/#http-requests","text":"This page contains help for the 4 different HTTP requests that will be used to interact with this API. It contains examples written in popular languages and what you should expect from successful and unsuccessful requests.","title":"HTTP Requests"},{"location":"reference/requests/#get","text":"Summary A GET request is used to fetch data from a specific data source from a server. Performing a GET request will not have any effect on the server, it simply fetches data. You send a GET request to a specific endpoint, data can be supplied in the URL or in headers. GET Example Python import requests url = 'https://<url>/<endpoint>' params = { \"key1\" : \"value1\" , \"key2\" : \"value2\" } r = requests . get ( url = url , params = params ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 200 which means okay. There will be some header fields and then a body containing the requested data. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong.","title":"GET"},{"location":"reference/requests/#post","text":"Summary A POST request is used to submit data to a server. The request asks the server to accept the data stored in the body of the request. It is used to create a resource on the server, often sent to general endpoints rather than specific URIs. Logging into a website typically uses POST, where the login credentials are stored in the body and a user session is created. POST Example Python import requests url = 'https://<url>/<endpoint>' data = { \"key1\" : \"value1\" , \"key2\" : \"value2\" } r = requests . post ( url = url , data = data ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 201 which means created. There will be some header fields and then a body containing the data added to the server, often formatted differently to what was sent. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong.","title":"POST"},{"location":"reference/requests/#put","text":"Summary A PUT request is used to update a resource on the server. The request URI points to an existing resource which must be completely replaced by the new data in the request. If the URI doesn't exist, the server may or may not create a new resource, for this application, it will return an error and not create the resource. PUT Example Python import requests url = 'https://<url>/<endpoint>' data = { \"key1\" : \"value1\" , \"key2\" : \"value2\" } r = requests . put ( url = url , data = data ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 200 which means okay. There will be some header fields and then a body containing the updated data. The response may also be 201 if the request caused an entry to be created. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong.","title":"PUT"},{"location":"reference/requests/#delete","text":"Summary A DELETE request simply removes a resource on the server. The request URI must exist, otherwise the request will fail (as there is nothing to delete). DELETE Example Python import requests url = 'https://<url>/<endpoint>' r = requests . delete ( url = url ) print ( r . status_code ) print ( r . text ) Successful Request A successful request will return the HTTP status code: 204 which means the data was deleted and there is no content. No body will be returned but there may be headers containing useful information. Failed Request A failed request will return the HTTP status code: 400 if the request is formatted incorrectly, 401 / 403 if you are unauthenticated or denied access to the data, 404 if the data can't be found or 500 if an error occurs with the server. There may also be a body in the response which will give more details as to what went wrong.","title":"DELETE"},{"location":"reference/detection/endpoint/","text":"Endpoints Modules Register Module Request Structure Field Location Description field header :material-check: field Response Register Module Successful Response { \"Response\" : \"Here\" } Register Module Failure { \"Error\" : \"Here\" } Remove Module Request Structure Field Location Description field header :material-check: field Response Remove Module Successful Response { \"Response\" : \"Here\" } Remove Module Failure { \"Error\" : \"Here\" } Update Module Status Request Structure Field Location Description field header :material-check: field Response Update Module Successful Response { \"Response\" : \"Here\" } Update Module Failure { \"Error\" : \"Here\" } Locations Update Location Request Structure Field Location Description field header :material-check: field Response Update Location Successful Response { \"Response\" : \"Here\" } Update Location Failure { \"Error\" : \"Here\" } Request Location Request Structure Field Location Description field header :material-check: field Response Request Location Successful Response { \"Response\" : \"Here\" } Request Location Failure { \"Error\" : \"Here\" }","title":"Endpoints"},{"location":"reference/detection/endpoint/#endpoints","text":"","title":"Endpoints"},{"location":"reference/detection/endpoint/#modules","text":"","title":"Modules"},{"location":"reference/detection/endpoint/#register-module","text":"","title":"Register Module"},{"location":"reference/detection/endpoint/#remove-module","text":"","title":"Remove Module"},{"location":"reference/detection/endpoint/#update-module-status","text":"","title":"Update Module Status"},{"location":"reference/detection/endpoint/#locations","text":"","title":"Locations"},{"location":"reference/detection/endpoint/#update-location","text":"","title":"Update Location"},{"location":"reference/detection/endpoint/#request-location","text":"","title":"Request Location"},{"location":"reference/front/endpoint/","text":"Endpoints Users Register User Request Structure Info Request Type: POST Endpoint: /api/users/ Field Type Description email String User's email name String User's name username String User's username password String User's password (unhashed) care-home Integer Care home ID Response Register User Successful Response { \"Response\" : \"Here\" } Register User Failure { \"Error\" : \"Here\" } Log-in Request Structure Info Request Type: POST Endpoint: /api/login/ Field Type Description name String User's username or email password String User's password (unhashed) Response Log-in Successful Response { \"Response\" : \"Here\" } Log-in Failure { \"Error\" : \"Here\" } Log-out Request Structure Info Request Type: POST Endpoint: /api/logout/ Field Type Description session-id Integer Session ID for the user Response Log-out Successful Response { \"Response\" : \"Here\" } Log-out Failure { \"Error\" : \"Here\" } Update User Request Structure Info Request Type: PUT Endpoint: /api/users/<user-id>/ Field Type Description name Header User's username or email password Header User's password (unhashed) new-name Header User's new username new-password Header User's new password (unhashed) Response Update User Successful Response { \"Response\" : \"Here\" } Update User Failure { \"Error\" : \"Here\" } Remove User Request Structure Info Request Type: DELETE Endpoint: /api/users/<user-id> Field Type Description email String User's email username String User's username password String User's password (unhashed) Response Remove User Successful Response { \"Response\" : \"Here\" } Remove User Failure { \"Error\" : \"Here\" } Admin View Care Home Request Structure Info Request Type: GET Endpoint: /api/homes/<care-home-id>/ Field Type Description auth Authentication Authentication information for the admin Response View Care Home Successful Response { \"Response\" : \"Here\" } View Care Home Failure { \"Error\" : \"Here\" } Contacts Get Contacts Request Structure Info Request Type: GET Endpoint: /api/contacts/ Contacts for an individual resident can be accquired using /api/residents/<resident-id>/contacts Field Type Description auth Authentication Authentication information for the user Response Get Contacts Successful Response { \"Response\" : \"Here\" } Get Contacts Failure { \"Error\" : \"Here\" } Acknowledge Contact Request Structure Info Request Type: POST Endpoint: /api/contacts/<contact-id> Field Type Description auth Authentication Authentication information for the user positive Boolean Whether the contact resulted in a positive case or not Response Aknowledge Contact Successful Response { \"Response\" : \"Here\" } cknowledge Contact Failure { \"Error\" : \"Here\" } Cases Get Cases Request Structure Info Request Type: GET Endpoint: /api/cases/ Field Type Description auth Authentication Authentication information for the user Response Get Cases Successful Response { \"Response\" : \"Here\" } Get Cases Failure { \"Error\" : \"Here\" } Register Case Request Structure Info Request Type: POST Endpoint: /api/cases/ Field Type Description auth Authentication Authentication information for the user resident-id Integer ID of infected resident date Date Current date (when the contact was detected) Response Register Case Successful Response { \"Response\" : \"Here\" } Register Case Failure { \"Error\" : \"Here\" } Remove Case Request Structure Info Request Type: DELETE Endpoint: /api/cases/<case-id>/ Field Type Description auth Authentication Authentication information for the user Response Remove Case Successful Response { \"Response\" : \"Here\" } Remove Case Failure { \"Error\" : \"Here\" } Residents View Residents Request Structure Info Request Type: GET Endpoint: /api/residents/ Information for a specific resident can be accquired using /api/residents/<resident-id>/ Field Type Description auth Authentication Authentication information for the user Response View Residents Successful Response { \"Response\" : \"Here\" } View Residents Failure { \"Error\" : \"Here\" } Add Resident Request Structure Info Request Type: POST Endpoint: /api/residents/ Field Type Description auth Authentication Authentication information for the user name String Resident's name Response Add Resident Successful Response { \"Response\" : \"Here\" } Add Resident Failure { \"Error\" : \"Here\" } Remove Resident Request Structure Info Request Type: DELETE Endpoint: /api/residents/<resident-id>/ Field Type Description auth Authentication Authentication information for the user Response Remove Resident Successful Response { \"Response\" : \"Here\" } Remove Resident Failure { \"Error\" : \"Here\" } Modules Get Status Request Structure Info Request Type: GET Endpoint: /api/modules/ Status of an individual module can be accquired using /api/modules/<module-id>/ Field Type Description auth Authentication Authentication information for the user Response Get Status Successful Response { \"Response\" : \"Here\" } Get Status Failure { \"Error\" : \"Here\" }","title":"Endpoints"},{"location":"reference/front/endpoint/#endpoints","text":"","title":"Endpoints"},{"location":"reference/front/endpoint/#users","text":"","title":"Users"},{"location":"reference/front/endpoint/#register-user","text":"","title":"Register User"},{"location":"reference/front/endpoint/#log-in","text":"","title":"Log-in"},{"location":"reference/front/endpoint/#log-out","text":"","title":"Log-out"},{"location":"reference/front/endpoint/#update-user","text":"","title":"Update User"},{"location":"reference/front/endpoint/#remove-user","text":"","title":"Remove User"},{"location":"reference/front/endpoint/#admin","text":"","title":"Admin"},{"location":"reference/front/endpoint/#view-care-home","text":"","title":"View Care Home"},{"location":"reference/front/endpoint/#contacts","text":"","title":"Contacts"},{"location":"reference/front/endpoint/#get-contacts","text":"","title":"Get Contacts"},{"location":"reference/front/endpoint/#acknowledge-contact","text":"","title":"Acknowledge Contact"},{"location":"reference/front/endpoint/#cases","text":"","title":"Cases"},{"location":"reference/front/endpoint/#get-cases","text":"","title":"Get Cases"},{"location":"reference/front/endpoint/#register-case","text":"","title":"Register Case"},{"location":"reference/front/endpoint/#remove-case","text":"","title":"Remove Case"},{"location":"reference/front/endpoint/#residents","text":"","title":"Residents"},{"location":"reference/front/endpoint/#view-residents","text":"","title":"View Residents"},{"location":"reference/front/endpoint/#add-resident","text":"","title":"Add Resident"},{"location":"reference/front/endpoint/#remove-resident","text":"","title":"Remove Resident"},{"location":"reference/front/endpoint/#modules","text":"","title":"Modules"},{"location":"reference/front/endpoint/#get-status","text":"","title":"Get Status"}]}